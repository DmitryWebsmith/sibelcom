Обзор сайта [textai.su](https://textai.su) (последняя работа)

Сайт предназначен для взаимодействия с нейросетевыми моделями. В данный момент на сайте представлено 6 моделей.

Сайт решает следующие проблемы:
   - решение задач программирования, оптимизация кода, корректировка ошибок;
   - решение задач точных наук: сервис распознает изображения и предоставляет решение поставленных задач;
   - транскрибация аудио.

Целевая аудитория: программисты, инженеры, школьники, студенты.

Архитектурный стиль монолитный, выбран в связи с тем, что данный вариант наиболее оптимален с точки зрения скорости разработки для сайтов, посещаемость которых не ожидается высокой.

Компоненты приложения:
   - **Клиентская часть:** vue.js, библиотека компонентов vuetify.
   - **Серверная часть:** Laravel v11.
   - **База данных:** MySQL.
   - **API:** используются REST запросы к разработчикам нейросетевых моделей, оплата пользователями услуг сервиса реализована через API ЮКасса.

Архитектура:
   - Model-View-Controller: Laravel является MVC фреймворком.

Используются сервисные классы:
   - **AccessToAssistantService** - определяет может ли пользователь использовать сервис (достаточен ли баланс, тестовый период или нет);
   - **ChatGptService** - сервис работы с ChatGpt;
   - **GigaChatService** - сервис работы с GigaChat;
   - **GuzzleHttpService** - сервис работы с запросами;
   - **ImageService** - сервис работы с изображениями;
   - **MailService** - почтовый сервис;
   - **TelegramService** - сервис отправки уведомлений в телеграмм;
   - **WhisperService** - сервис транскрибации.

Таблицы базы, помимо тех, что идут в комплекте с Laravel:
   - **ai_models** - подключенные нейросетевые модели;
   - **audio_transcriptions** - статистика транскрибаций, длительность записи, цена;
   - **email_confirmations** - таблица, предназначенная для подтверждения e-mail пользователя, введенного после регистрации;
   - **messages** - таблица сообщений, текст, количество входящих и исходящих токенов, использованная модель;
   - **payments** - статистика платежей;
   - **prompts** - промпты пользователей;
   - **user_balances** - балансы пользователей;
   - **user_models** - модели пользователей, пользователь может выбирать модель, в таблице сохраняется последний выбор пользователя.

Пользователю после регистрации необходимо подтвердить аккаунт, переходом по ссылке, отправленной в приветственном письме. При отправке почтовых сообщений используются очереди для избежания задержек выполнения кода.

В случае неудачно выполненных API запросов, выполняется логирование полученных исключений.

По расписанию работают команды очистки хранилища от старых файлов, обновления стоимости использования сервиса (цена провайдера + маржа).

Подтверждение пользователем учетной записи, успешная оплата сопровождаются уведомлением администратора посредством телеграмм сообщений.

Обновления сайта производятся через GitHub.

Сайт развернут на сервере OS Ubuntu, веб-сервер Nginx.